#!/bin/bash
#
# Run an INAETICS Image builder service
#
# (C) 2014 INAETICS, <www.inaetics.org> - Apache License v2.

#
# Config
#
VERBOSE_LOG=false
BUILDER_DIR="/var/lib/docker-image-builder"
BUILDER_REPO="https://github.com/INAETICS/docker-image-builder.git"
BUILDER_SCRIPT="docker-image-builder"
UPDATE_INTERVAL=300

declare -A DOCKER_IMAGES
DOCKER_IMAGES["inaetics/node-agent"]="https://github.com/INAETICS/node-agent-service.git"
DOCKER_IMAGES["inaetics/node-provisioning"]="https://github.com/INAETICS/node-provisioning-service.git"

#
# Functions
#

verbose () {
  if $VERBOSE_LOG; then $@; else $@ &> /dev/null; fi
  return $?
}

verbose_err () {
  if $VERBOSE_LOG; then $@; else $@ 1> /dev/null; fi
  return $?
}

verbose_out () {
  if $VERBOSE_LOG; then $@; else $@ 2> /dev/null; fi
  return $?
}

update_builder () {
  if [ ! -d "$BUILDER_DIR" ]; then 
    echo "Cloning image builder"
    git clone $BUILDER_REPO $BUILDER_DIR
  else 
    echo "Updating image builder"
    cd $BUILDER_DIR
    git pull
  fi
  if [ $? -ne 0 ]; then
    echo "Builder update failed!" 1>&2
    return 1
  fi
  return 0
}

update_image () {
  echo "Updating image: $1 => $2"
  local imageid=$(verbose_out $BUILDER_DIR/$BUILDER_SCRIPT locate $1 $2)
  if [ $? -ne 0 ]; then
    echo "Image update failed!" 1>&2
    return 1
  fi
  echo "Image updated (${imageid:0:12})"
  return 0
}

clean_up () {
    exit 0
}

#
# Main
#
trap clean_up SIGHUP SIGINT SIGTERM

for var in "$@"; do
  if [ "$var" == "-v" ]; then
    VERBOSE_LOG=true
  fi
done

echo "-----------------------------------------------------------------------"
echo "Image builder service"
echo "-----------------------------------------------------------------------"
echo -e "VERBOSE LOG\t: $VERBOSE_LOG (use -v option to enable)"
echo -e "BUILDER_DIR\t: $BUILDER_DIR"
echo -e "BUILDER_REPO\t: $BUILDER_REPO"
echo -e "BUILDER_SCRIPT\t: $BUILDER_SCRIPT"
echo "-----------------------------------------------------------------------"

while true; do
  update_builder
  if [ $? -ne 0 ]; then
      echo "Builder update failed! Skipping image updates..." 1>&2
  else
    for image in ${!DOCKER_IMAGES[@]}; do
      update_image $image ${DOCKER_IMAGES[$image]}
    done
  fi
  echo "Will check for updates in $UPDATE_INTERVAL seconds..."
  sleep $UPDATE_INTERVAL &
  wait $!
done
