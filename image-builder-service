#!/bin/bash

# Control image-builder-service run|stop|start with docker
#
# This is just a very simple helper. Use docker directly
# for full options (see http://www.docker.com/)

# Script return values
readonly EOK=0
readonly EINVALID_ARGS=1
readonly ENO_ETCDCTL=2
readonly ENO_GIT=2
readonly ENO_DOCKER=2
readonly ENO_DOCKER_REPO=3
readonly EETCD_UNREACHABLE=4
readonly EREPO_CLONE_FAILED=5
readonly EBUILD_FAILURE=6
readonly EPUBLISH_FAILED=7
readonly EUNKNOWN_IMAGE=8
# Local constants
readonly builder_root="/tmp/image-builder"
readonly etcd_ns="/inaetics/image-builder-service"

oldpwd=`pwd`
cd $(dirname $0)

_log() {
    echo $@ >&2
}

_show_usage() {
    echo "Usage: $(basename $0) COMMAND [arg...]

Commands:
  build REPO_NAME GIT_REPO_URL
     builds a new or updates an existing Docker image, pulling the repository from
     the given Git repository URL and tagging it with the given REPO_NAME;
  list
     shows a list of all build images.
"
    exit $EINVALID_ARGS
}

# Fetch the arguments & check semantics
command=$1

if [ "$command" == "build" ]; then
    # Needs two additional arguments
    img_name=$2
    git_repo_url=$3

    if [ -z $img_name ] || [ -z $git_repo_url ]; then
        _show_usage
    fi
elif [ "$command" != "list" ]; then
    _show_usage
fi


# We depend on Etcd, so lets verify we can use it...
etcdctl=$(which etcdctl)
if [ -z $etcdctl ]; then
    _log "Etcdctl not available, cannot run $(basename $0)!"
    exit $ENO_ETCDCTL
else
    # Try to invoke it, to see we can contact Etcd...
    _=$($etcdctl ls >/dev/null 2>&1)
    if [ "$?" != "0" ]; then
        _log "Unable to access Etcd, is it not running?!"
        exit $EETCD_UNREACHABLE
    fi
fi
# We need Git as well, so lets search for that one as well...
git=$(which git)
if [ -z $git ]; then
    _log "Git not available, cannot run $(basename $0)!"
    exit $ENO_GIT
fi
# Last stop: check for the availability of Docker...
docker=$(which docker)
if [ -z $docker ]; then
    _log "Docker not available, cannot run $(basename $0)!"
    exit $ENO_DOCKER
fi

# Locates a service inside Etcd
#   args: NAME - the service name to lookup;
#   returns: the location of the requested service
locate_service() {
    local name=$1

    local services=$($etcdctl ls $name 2>/dev/null)
    for service in ${services[@]}; do
        echo $($etcdctl get $service) | tr -d "\""
    done
}

# Initializes the Etcd directory for use with this service
#   args: NS - the Etcd namespace to initialize
#   returns: nothing
init_etcd() {
    local ns=$1
    $($etcdctl ls "$ns" >/dev/null 2>&1)
    if [ "$?" = "4" ]; then
        _log "Dir ${ns} not found, creating one..."
        $etcdctl mkdir "$ns" 2>&1 >/dev/null
    fi
}

# Clears the store build information from Etcd
#   args: none
#   returns: nothing
_clear_etcd() {
    local ns=$1
    $etcdctl rm "$ns" --recursive >/dev/null 2>&1
    if [ "$?" != "0" ]; then
        _log "Clearing failed..."
    fi
}

# Provides information on earlier build images.
#   args: NS - the Etcd namespace to look for build images;
#         IMG_NAME - the name of the image to fetch.
#   returns: <img name> <git URL> <docker ID>
_get_build_image() {
    local ns=$1
    local img_name=$2

    local keys=$($etcdctl ls "$ns/$img_name" 2>/dev/null)
    if [ -z "$keys" ]; then
        return
    fi

    local repo_url=$($etcdctl get "$ns/$img_name/repo" | tr -d "\"")
    local docker_id=$($etcdctl get "$ns/$img_name/dockerId" | tr -d "\"")
    printf "%-25s %-16s %s\n" $img_name $docker_id $repo_url
}

# Provides a list of all images that were build.
#   args: NS - the Etcd namespace to look for build images
#   returns: <img name> <git URL> <docker ID>
_get_build_images() {
    local ns=$1
    local imgs=($($etcdctl ls "$ns" 2>&1))
    printf "%-25s %-16s %s\n" "REPOSITORY NAME" "IMAGE ID" "GIT URL"
    for img in ${imgs[@]}; do
        _get_build_image $ns ${img/$ns\//}
    done
}

# Publishes a new build image to Etcd
#   args: NS - the Etcd namespace to store the image name in;
#         IMG_NAME - the name of the build image to publish;
#         GIT_REPO - the Git repository of the build image;
#         IMG_ID - the Docker image ID of the build image.
#   returns: nothing
_publish_build_image() {
    local ns=$1
    local img_name=$2
    local git_repo=$3
    local img_id=$4
    # Create directory?
    result=$($etcdctl ls "$ns/$img_name" 2>&1 >/dev/null)
    if [ $? != 0 ]; then
        $etcdctl mkdir "$ns/$img_name" 2>&1 >/dev/null
        if [ $? != 0 ]; then
            _log "Failed to create directory..."
            exit $EPUBLISH_FAILED
        fi
    fi
    $etcdctl set $ns/$img_name/repo $git_repo 2>&1 >/dev/null
    if [ "$?" != "0" ]; then
        _log "Publishing failed..."
        exit $EPUBLISH_FAILED
    fi
    $etcdctl set $ns/$img_name/dockerId $img_id 2>&1 >/dev/null
    if [ "$?" != "0" ]; then
        _log "Publishing failed..."
        exit $EPUBLISH_FAILED
    fi
}

# Native implementation of URLEncode, taken from <https://gist.github.com/cdown/1163649>.
#   arg: URL - the URL/text to URL encode.
#   returns: URL encoded text.
_urlencode() {
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
            case $c in
                [a-zA-Z0-9.~_-]) printf "$c" ;;
                *) printf "$c" | xxd -p -c1 | while read x; do printf "%%%s" "$x"; done
            esac
    done
}

# Does a search-and-replace for the '##APT_PROXY' placeholder
#   args: FILE - the file to do the search-and-replace on.
#   returns: nothing
_replace_apt_cacher() {
    local file=$1

    local value=$(locate_service "inaetics/apt-cacher-service")
    if [ -z "$value" ]; then
        _log "Cannot replace APT_CACHER macro: no replacement value given!"
        return
    fi
    value="RUN echo \"Acquire::http::Proxy \\\\\"http://${value}\\\\\";\" >/etc/apt/apt.conf.d/01proxy"
    # Do the actual replacement...
    sed -i "/##APT_PROXY/ c\\$value" $file
}

# Does a search-and-replace for the '##JDK_LOCATION' placeholder
#   args: FILE - the file to do the search-and-replace on.
#   returns: nothing
_replace_jdk_location() {
    local file=$1

    # TODO
}

# Builds a Docker image and publishes the results to Etcd
#  args: NAME - the name of the image to build;
#        REPO_URL - the Git repository URL of the image to build;
#        TMP_DIR - the temporary directory to use for building the image.
build_image() {
    local name=$1
    local repo_url=$2
    local tmp_dir="${3:-/tmp}/$(_urlencode $name)"

    if [ -d $tmp_dir ]; then
        # Repository already exists, update it...
        cd $tmp_dir
        $git remote update >/dev/null 2>&1
        changed=$($git status -uno | grep behind)
        if [ -z "$changed" ]; then
            _log "No changes in for $name in $tmp_dir..."
        else
            _log "Pulling latest changes for $name in $tmp_dir..."
            $git pull >/dev/null 2>&1
        fi
        cd - >/dev/null 2>&1
    else
        _log "Cloning $name to $tmp_dir..."
        # Repository does not exist, clone it...
        $git clone --depth=1 $repo_url $tmp_dir >/dev/null 2>&1
    fi

    if [ $? != 0 ]; then
        _log "Cloning/updating Git repository failed [$?]..."
        exit $EREPO_CLONE_FAILED
    fi

    if [ ! -f "$tmp_dir/Dockerfile" ]; then
        _log "No Dockerfile found, cannot build image!"
        exit $ENO_DOCKER_REPO
    fi

    # Replace the "macros" in the Dockerfile...
    _replace_apt_cacher "$tmp_dir/Dockerfile"
    _replace_jdk_location "$tmp_dir/Dockerfile"

    _log "Building image $name, this can take a little while..."

    result=$($docker build -q -t $name $tmp_dir 2>&1 | grep 'Successfully built ' | awk '{print $3}')
    if [ $? != 0 ]; then
        _log "Building image ($name) failed!"
        exit $EBUILD_FAILURE
    fi

    _log "Image ($name) build successfully with ID $result!"
    _publish_build_image $etcd_ns $name $repo_url $result
}

###
### MAIN
###

# Initialize the Etcd namespace...
init_etcd $etcd_ns

case $command in
    build)
        result=$(_get_build_image $etcd_ns $img_name)
        if [ -z "$result" ]; then
            _log "Image ($img_name) not yet build, starting one..."
        fi
        build_image $img_name $git_repo_url
        ;;
    list)
        _get_build_images $etcd_ns
        ;;
esac


cd $oldpwd
exit 0
