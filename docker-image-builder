#!/bin/bash
# Facade script for working with Git-based Docker repositories.
#
# (C) 2014 INAETICS, <www.inaetics.org> - Apache License v2.

#FIXME configuration/environment
#FIXME add a forced build
#FIXME better input/error checking
BUILDER_HOMEDIR=$(dirname $0)
BUILDER_WORKDIR="/var/cache/docker-image-builder"
BUILDER_DEBUG="true"
REGISTRY_NAMESPACE="/inaetics/docker-image-builder"
#
# Supporting libs
#

source "$(dirname $0)/lib/builder.sh"
source "$(dirname $0)/lib/docker.sh"
source "$(dirname $0)/lib/etcdctl.sh"

#
# Util functions 
#

# Wraps a function call to redirect or filter stdout/stderr
# depending on the debug setting
#   args: $@ - the wrapped call
#   return: the wrapped call's return
_call () {
  if [ "$BUILDER_DEBUG" != "true"  ]; then
    $@ &> /dev/null
    return $?
  else
    $@ 2>&1 | awk '{print "[DEBUG] "$0}' >&2
    return ${PIPESTATUS[0]}
  fi
}

# Echo a debug message to stderr, perpending each line
# with a debug prefix.
#   args: $@ - the echo args
_dbg() {
  if [ "$BUILDER_DEBUG" == "true" ]; then
    echo $@ | awk '{print "[DEBUG] "$0}' >&2
  fi
}

# Echo a log message to stderr, perpending each line
# with a info prefix.
#   args: $@ - the echo args
_log() {
  echo $@ | awk '{print "[INFO] "$0}' >&2
}

# Translate an image name [<user>/]<repository>
# into a one that can be used as an (etcd) dir.
#   args: $@ - the name(s)
_dirname () {
  echo "$@" | tr '/' '_'
}

# Get the repository directory for an image. The dir will
# not be created to allow git to clone into it.
#
#  args: $1, <name>, [<user>/]<repository>
#  echo: <dir>
_get_repository_dir () {
  #FIXME check input by parsing name
  _dbg "-> $FUNCNAME - args: $@"
  dir="${BUILDER_WORKDIR}/repos/$(_dirname $1)"
  _dbg "-> $FUNCNAME - repository dir: $dir"
  echo $dir
}

# Get the build directory for an image. The dir will
# not be created to allow git to clone into it.
#
#  args: $1, <name>, [<user>/]<repository>
#  echo: <dir>
_get_build_dir () {
  #FIXME check input by parsing name
  _dbg "-> $FUNCNAME - args: $@"
  dir="${BUILDER_WORKDIR}/builds/$(_dirname $1)"
  _dbg "-> $FUNCNAME - repository dir: $dir"
  echo $dir
}

#
# Core functions
#

# Init directories and check enviroment.To be called in main 
# process once at start of script execution.
_init () {
  if [ "${BUILDER_WORKDIR}" == "" ]; then
    _log "FATAL: Missing env setting: BUILDER_WORKDIR"
    exit 1
  fi
  if [ ! -d "${BUILDER_WORKDIR}" ]; then
    _call mkdir -v ${BUILDER_WORKDIR}
    if [ ! -d "${BUILDER_WORKDIR}" ]; then
      _log "FATAL: Failed to create work dir: ${BUILDER_WORKDIR}"
      exit 1
    fi
  fi
  if [ ! -d "${BUILDER_WORKDIR}/repos" ]; then
    _call mkdir -v ${BUILDER_WORKDIR}/repos
    if [ ! -d "${BUILDER_WORKDIR}/repos" ]; then
      _log "FATAL: Failed to create repos dir: ${BUILDER_WORKDIR}/repos"
      exit 1
    fi
  fi
  if [ ! -d "${BUILDER_WORKDIR}/builds" ]; then
    _call mkdir -v ${BUILDER_WORKDIR}/builds
    if [ ! -d "${BUILDER_WORKDIR}/builds" ]; then
      _log "FATAL: Failed to create builds dir: ${BUILDER_WORKDIR}/builds"
      exit 1
    fi
  fi
}

# Get the build directory for an image. The dir will
# not be created to allow git to clone into it.
#
#  args: $1, <name>, [<user>/]<repository>
#  echo: <dir>
_get_build_dir () {
  #FIXME check input by parsing name
  _dbg "-> $FUNCNAME - args: $@"
  dir="${BUILDER_WORKDIR}/builds/$(_dirname $1)"
  _dbg "-> $FUNCNAME - repository dir: $dir"
  echo $dir
}

# Update a git repository by either cloning or pulling and returning
# its master revision
#  args: $1, <repository url>
#   $2, <repository dir>
#   $3, <repository branch>
#  echo: <revision>
_update_git_repository () {
  #FIXME check input
  #git remote -v | grep origin | awk '{print $2}'
  _dbg "-> $FUNCNAME - args: $@"
  if [ -d "$2" ]; then
    _dbg "-> $FUNCNAME - dir exists, pulling!"
    cd $2
    _call git pull
  else
    _dbg "-> $FUNCNAME - dir empty, cloning!"
    _call git clone -b $3 --single-branch --depth=1 $1 $2
  fi
  local rev=$(git log --pretty=oneline -1 $branch | awk '{print $1}')
  _dbg "$FUNCNAME - rev: $rev"
  echo $rev
}

# Provides a list of all images that were build.
#   returns: <img name> <git URL> <docker ID>
_list_registry_images () {
  _dbg "-> $FUNCNAME - args: $@"
  local value
  for image in $(etcd/keys $REGISTRY_NAMESPACE); do
    value=$(etcd/value $image)
    _dbg "-> $FUNCNAME - image: $value"
   echo $value
  done
}

_update_registry_images () {
  _dbg "-> $FUNCNAME - args: $@"
  local value; local array
  for image in $(etcd/keys $REGISTRY_NAMESPACE); do
    value=$(etcd/value $image)
    _dbg "-> $FUNCNAME - image: $value"
    array=($value)
    build_image ${array[0]} ${array[3]}
  done
}

# Locate an image in the registry by name and matching repository
# revision.
#  args: $1: <repository name>, format [<user>/]<repository>
#  echo: <name> <dockerid> <gitrev> <giturl>
#  return: 0, if image was found
#    1, if image was not found
_locate_registry_image () {
  _dbg "-> $FUNCNAME - args: $@"
  local path="$REGISTRY_NAMESPACE/$(_dirname $1)"
  _dbg "-> $FUNCNAME - path: $path"
  local info=$(etcd/value $path)
  _dbg "-> $FUNCNAME - info: $info"
  if [ "${info}" == "" ]; then
    _dbg "-> $FUNCNAME - image not found"
    return 1
  fi
  _dbg "-> $FUNCNAME - info: $info"
  echo ${info//#/ }
}

# Locate an image in the registry by name and matching repository
# revision.
#  args: $1: <repository name>, format [<user>/]<repository>
#    $2: <image id> 
#    $3: <image rev> 
#    $4: <image url> 
_publish_registry_image () {
  _dbg "-> $FUNCNAME - args: $@"
  if [ "$1" == "" ] || [ "$2" == "" ]; then
    _log "Image name and id required"
    return 1
  fi
  local path="$REGISTRY_NAMESPACE/$(_dirname $1)"
  _dbg "-> $FUNCNAME - path: $path"
  local info="${1}#${2}#${3:-nil}#${4:-nil}"
  _dbg "-> $FUNCNAME - info: $info"
  etcd/put $path "$info"
}

# Push an image to available docker registries.
#  args: $1: <image id>>
#    $2: <image name> 
_push_image_upstream () {
  #FIXME if the image was pulled skip tagging pushing to origin
  _dbg "-> $FUNCNAME - args: $@"
  local registries=$(etcd/values /inaetics/docker-registry-service)
  _dbg "-> $FUNCNAME - registries: $registries"
  local res
  for registry in $registries; do
    res=$(docker/tag_image $1 $registry/$2)
    res=$(docker/push_image $registry/$2)
    if [ ! "$res" == "" ]; then
      _log "-> pushed $res"
    fi
  done
}

# Push an image to available docker registries.
#  args: $1: <image name>
#    $2: <docker id>, optional filter
#  echo: <dockerid>
#  return: 0, if image was found
#    1, if image was not found
_pull_upstream_image() {
  _dbg "-> $FUNCNAME - args: $@"
  local registries=$(etcd/values /inaetics/docker-registry-service)
  _dbg "-> $FUNCNAME - registries: $registries"
  local dockerid
  for registry in $registries; do
    dockerid=$(docker/pull_image $registry/$1)
    if [ "$dockerid" != "" ]; then
      _dbg "-> $FUNCNAME - image pulled from $registry"
      if [ "$2" == "" ] || [ "$2" == "$dockerid" ]; then
        local res=$(docker/tag_image $dockerid $1)
        echo $dockerid
        return 0
      fi
      _dbg "-> $FUNCNAME - image dockerid does not match"
    fi
    _dbg "-> $FUNCNAME - image not found at $registry"
  done
}


# Pull an upstream image to the local docker cache and push
# it out to all docker registry services
#   args: $1 - <image name>
#  echo: <image_id>
#  return: 0, if image was found
#    1, if image was not found
cache_image () {
  _dbg "-> $FUNCNAME - args: $@"
  local image_name=$(docker/parse_image_name $1)
  if [ "$image_name" == "" ]; then
    _log "Failed to parse name: $1"
    return 1
  fi
  local dockerid=$(docker/get_image_id $image_name)
  if [ "$dockerid" != "" ]; then
    _log "Found local image: $dockerid"
  else
    dockerid=$(_pull_upstream_image $image_name)
    if [ "$dockerid" != "" ]; then
      _log "Pulled upstream image: $dockerid"
    fi
  fi
  if [ "$dockerid" != "" ]; then
    _log "Pushing to upstream repositories"
    _call _push_image_upstream $dockerid $image_name
    echo $dockerid
    exit 0
  fi
  _log "Unable to locate image $image_name"
  exit 1
}


# Builds a Docker image and publishes the results to Etcd
#  args: $1: <repository name>, format [<user>/]<repository>
#    $2 - <repository url>
#    $3 - <repository branch>
locate_image () {
  _dbg "-> $FUNCNAME - args: $@"
  local image_name=$(docker/parse_image_name $1);
  local repository_url=$2
  local repository_branch=$3
  if [ "$image_name" == "" ] || [ "$repository_url" == "" ] || [ "$repository_branch" == "" ]; then
    _log "Parameters required"
   return 1
  fi
  local repository_dir=$(_get_repository_dir $image_name)
  local located_image_id
  local located_image_name
  
  _log "Locating image $image_name"
  _dbg "-> $FUNCNAME - url:  $repository_url"
  _dbg "-> $FUNCNAME - dir:  $repository_dir"

  _log "Updating repository from  $repository_url"
  local repository_rev=$(_update_git_repository $repository_url $repository_dir $repository_branch)
  _log "-> repository revision is $repository_rev"

  _log "Looking up image in registry"
  local registry_image=($(_locate_registry_image $image_name))
  if [ ${#registry_image[@]} -eq 0 ]; then
    _log "-> no image found"
  else
    _log "-> registered image: ${registry_image[@]}"
    if [ "${registry_image[2]}" != "$repository_rev" ]; then
      _log "-> registered image revision is old"
    else
      located_image_id=${registry_image[1]}
      _log "-> registered image is up to date"
    fi
  fi

  if [ "$located_image_id" != "" ]; then
    _log "Checking for locally stored image"
    located_image_name=$(docker/get_image_name $located_image_id)
    if [ "$located_image_name" != "" ]; then
      _log "-> found local image: $located_image_name"
    else 
      _log "-> no local image found"
    fi
  fi
   
  if [ "$located_image_id" != "" ] && [ "$located_image_name" == "" ]; then
    _log "Checking for remotely available image"
    located_image_name=$(_pull_upstream_image $image_name $located_image_id)
    if [ "$located_image_name" != "" ]; then
      _log "-> pulled remote image: $located_image_name"
    else
      _log "-> no remote image found"
    fi
  fi 

  if [ "$located_image_name" != "" ]; then
    _log "Tagging located image name: $image_name"
    located_image_name=$(docker/tag_image $located_image_id $image_name)
  fi

  if [ "$located_image_name" == "" ]; then
    _log "Building image locally"
    local apt_cachers=($(etcd/values /inaetics/apt-cacher-service))
    _call builder/build_image $image_name $repository_dir ${apt_cachers[0]}
    located_image_name=$image_name
    located_image_id=$(docker/get_image_id $located_image_name)
  fi

  if [ "$located_image_id" == "" ] || [ "$located_image_name" == "" ]; then
    _log "Failed to locate image $image_name with $repository_url"
    exit 1
  fi

  _log "Pushing image to docker registries"
  _push_image_upstream $located_image_id $located_image_name

  _log "Publishing image in builder registry"
  _publish_registry_image $image_name $located_image_id $repository_rev $repository_url
  echo $located_image_id
}

# Print the usage information for this script
_usage() {
  echo "Usage: $(basename $0) COMMAND [arg...]

Commands:
  cache REPO_NAME
   pull an upstream images into the local docker caches and push it to all
   docker registry services
  locate REPO_NAME GIT_REPO_URL GIT_REPO_BRANCH
   builds a new or updates an existing Docker image, pulling the repository from
   the given Git repository URL and tagging it with the given REPO_NAME;
  list
   shows a list of all build images.
  update
   checks all previously build images and rebuild them if necessary.
"
}

#
# Main
#
_init
case $1 in
  cache)
    cache_image ${@:2}
    exit $?
  ;;
  locate)
    locate_image ${@:2}
    exit $?
  ;;
  update)
    _update_registry_images ${@:2}
    exit $?
  ;;
  list)
    printf "%-25s %-12s %-12s %s\n" "REPOSITORY NAME" "IMAGE ID" "GIT REV" "GIT URL"
    _list_registry_images ${@:2}
    exit $?
  ;;
  *)
    _usage
    exit 1
  ;;
esac
